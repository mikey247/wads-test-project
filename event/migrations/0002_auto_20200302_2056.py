# Generated by Django 2.2.9 on 2020-03-02 20:56

import datetime
from django.db import migrations, models
import django.db.models.deletion
import sitecore.blocks
import sitecore.parsers
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.images.blocks
import wagtail.snippets.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sitecore', '0001_initial'),
        ('wagtailcore', '0041_group_collection_permissions_verbose_name_plural'),
        ('event', '0001_initial'),
        ('wagtailimages', '0001_squashed_0021'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventPage',
            fields=[
                ('sitepage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sitecore.SitePage')),
                ('author', models.CharField(blank=True, help_text='Use this to override the default author/owner name.', max_length=255)),
                ('intro', wagtail.core.fields.RichTextField(blank=True, help_text='Provide introductory text here to summarise the event. Content appears in the event listing page and search result summaries.')),
                ('location', models.CharField(help_text='Location of the event', max_length=255)),
                ('location_link', models.URLField(blank=True, help_text='Link to location/institution website')),
                ('body', wagtail.core.fields.StreamField([('paragraph', wagtail.core.blocks.RichTextBlock(label='Rich Text Paragraph')), ('markdown', sitecore.blocks.MarkdownAndShortcodeTextBlock(label='Markdown Paragraph')), ('image', wagtail.images.blocks.ImageChooserBlock()), ('docs', wagtail.documents.blocks.DocumentChooserBlock(template='bootstrapblocks/document.html')), ('page', wagtail.core.blocks.PageChooserBlock(required=False)), ('code', wagtail.core.blocks.StructBlock([('lang', sitecore.blocks.Select2ChoiceBlock(choices=[('', 'Please select a language for syntax highlighting'), ('python3', 'Python'), ('javascript', 'JavaScript'), ('bash', 'Bash')])), ('code', wagtail.core.blocks.TextBlock(required=True)), ('hl_lines', sitecore.blocks.CSVIntListCharBlock(required=False)), ('line_nums', wagtail.core.blocks.BooleanBlock(help_text='Check to include line numbers', required=False))])), ('carousel', wagtail.snippets.blocks.SnippetChooserBlock(sitecore.blocks.CarouselSnippet, template='bootstrapblocks/carousel.html')), ('icon_card_deck', wagtail.snippets.blocks.SnippetChooserBlock(sitecore.blocks.IconCardDeckSnippet, template='bootstrapblocks/icon_card_deck.html'))], validators=[sitecore.parsers.ValidateCoreBlocks])),
                ('dates', wagtail.core.fields.StreamField([('date_block', wagtail.core.blocks.StructBlock([('date', wagtail.core.blocks.DateBlock(help_text='', required=True)), ('start_time', wagtail.core.blocks.TimeBlock(help_text='', required=True)), ('end_time', wagtail.core.blocks.TimeBlock(help_text='', required=True))]))])),
                ('event_type', wagtail.core.fields.StreamField([('registration', wagtail.core.blocks.StructBlock([('details', wagtail.core.blocks.CharBlock(group='Registration Info and Links', help_text='Enter details of the registration process.', max_length=4096, required=True)), ('link', wagtail.core.blocks.URLBlock(group='Registration Info and Links', help_text='Enter link to the registration site.', required=False)), ('email', wagtail.core.blocks.EmailBlock(group='Registration Info and Links', help_text='Enter email address to request registration.', required=False)), ('opening_date', wagtail.core.blocks.DateBlock(default=datetime.date.today, group='Registration Important Dates', help_text='Enter the date registration opens.', required=False)), ('closing_date', wagtail.core.blocks.DateBlock(default=datetime.date.today, group='Registration Important Dates', help_text='Enter the date registration closes.', required=False)), ('not_yet_open_text', wagtail.core.blocks.CharBlock(default='Registration is not yet open', group='Registration Status', help_text='Text displayed before registration opens.', max_length=255, required=True)), ('open_text', wagtail.core.blocks.CharBlock(default='Registration is open', group='Registration Status', help_text='Text displayed while registration is still open.', max_length=255, required=True)), ('closing_soon_text', wagtail.core.blocks.CharBlock(default='Registration is closing soon', group='Registration Status', help_text='Text displayed one week before registration closes.', max_length=255, required=True)), ('closed_text', wagtail.core.blocks.CharBlock(default='Registration is NOW CLOSED', group='Registration Status', help_text='Text displayed after registration closing date has passed.', max_length=255, required=True))], template='event/registration.html')), ('open_meeting', wagtail.core.blocks.StructBlock([('details', wagtail.core.blocks.CharBlock(help_text='Enter details of the open meeting.', max_length=4096, required=True)), ('link', wagtail.core.blocks.URLBlock(group='Open Meeting Info and Links', help_text='Enter link to additional information about the open meeting.', required=False)), ('email', wagtail.core.blocks.EmailBlock(group='Open Meeting Info and Links', help_text='Enter email address to request further details.', required=False))], template='event/open_meeting.html'))])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('duration', models.IntegerField()),
                ('event_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('sitecore.sitepage',),
        ),
        migrations.AddField(
            model_name='eventindexpage',
            name='index_root_page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.Page'),
        ),
        migrations.AddField(
            model_name='eventindexpage',
            name='listing_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image'),
        ),
    ]
