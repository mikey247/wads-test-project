# Generated by Django 2.2.9 on 2020-03-03 21:42

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.forms.widgets
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.contrib.routable_page.models
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailimages', '0001_squashed_0021'),
        ('wagtailcore', '0041_group_collection_permissions_verbose_name_plural'),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='CarouselSnippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Carousel title - optionally displayed with carousel; used as name in Snippet list', max_length=512)),
                ('display_title', models.BooleanField(default=False)),
                ('title_colour', models.CharField(choices=[('text-primary', 'Primary'), ('text-secondary', 'Secondary'), ('text-light', 'Light'), ('text-dark', 'Dark'), ('text-white', 'White'), ('text-body', 'Body'), ('text-muted', 'Muted'), ('text-white-50', 'White-50'), ('text-black-50', 'Black-50'), ('text-success', 'Success'), ('text-danger', 'Danger'), ('text-warning', 'Warning'), ('text-info', 'Info')], default='text-dark', max_length=128)),
                ('title_align', models.CharField(choices=[('text-justify', 'Justify'), ('text-left', 'Left'), ('text-center', 'Centre'), ('text-right', 'Right')], default='text-center', max_length=128)),
                ('animate', models.BooleanField(default=True, help_text='Enables carousel animation; automatic unless Ride option is enabled')),
                ('ride', models.BooleanField(default=True, help_text='If carousel animation is enabled, enabling this means user has to interact to start it manually')),
                ('crossfade', models.BooleanField(default=True, help_text='Carousel has fade transition rather than slide when enabled')),
                ('interval', models.IntegerField(default=5000, help_text='Delay (in milliseconds) between each slide transition')),
                ('pause', models.BooleanField(default=True, help_text='Carousel pauses with mouse hover when enabled')),
                ('wrap', models.BooleanField(default=True, help_text='Carousel goes through all slides continuously when enabled; stops at last slide otherwise')),
                ('show_controls', models.BooleanField(default=True, help_text='Carousel includes previous/next controls')),
                ('show_indicators', models.BooleanField(default=True, help_text='Carousel includes slide indicators to show active/num slides and allow direct slide selection')),
                ('slides', wagtail.core.fields.StreamField([('simple_slide', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.StructBlock([('level', wagtail.core.blocks.ChoiceBlock(choices=[('h2', 'h2'), ('h3', 'h3'), ('h4', 'h4'), ('h5', 'h5'), ('h6', 'h6')], widget=django.forms.widgets.RadioSelect)), ('title', wagtail.core.blocks.CharBlock(required=False)), ('sub_title', wagtail.core.blocks.CharBlock(help_text='Optional sub-heading in small text', required=False))], help_text='Main title for the slide (for larger screen sizes)', required=False)), ('body', wagtail.core.blocks.RichTextBlock(required=False, rows=3)), ('link', wagtail.core.blocks.StructBlock([('internal_link', wagtail.core.blocks.PageChooserBlock(help_text='Use to link to selected internal page OR...', label='Link (Internal Page)', required=False)), ('download_link', wagtail.documents.blocks.DocumentChooserBlock(help_text='Use to link to selected document for download OR', label='Download (Document)', required=False)), ('external_link', wagtail.core.blocks.URLBlock(help_text='Use to link to an external site.', label='Link (External URL)', required=False)), ('link_title', wagtail.core.blocks.CharBlock(help_text='Specify title for external link or provide override title for internal/download links.', label='Link Title Text', required=False)), ('short_title', wagtail.core.blocks.CharBlock(help_text='Specify short title for use on small screens. Defaults to "Read More" or "Download".', label='Short Title Text', required=False))], required=False)), ('image', wagtail.images.blocks.ImageChooserBlock()), ('apply_css_effect', wagtail.core.blocks.BooleanBlock(default=True, help_text='Check to apply the CSS effect to the image', required=False)), ('css_effect', wagtail.core.blocks.CharBlock(default='background: linear-gradient(to bottom, rgba(0,0,0,0.0), rgba(0,0,0,0.0) 50%, rgba(0,0,0,0.75) 70%);', help_text='CSS effect applied to image; default is gradient that darkens towards bottom.', required=False)), ('title_colour', wagtail.core.blocks.ChoiceBlock(choices=[('text-primary', 'Primary'), ('text-secondary', 'Secondary'), ('text-light', 'Light'), ('text-dark', 'Dark'), ('text-white', 'White'), ('text-body', 'Body'), ('text-muted', 'Muted'), ('text-white-50', 'White-50'), ('text-black-50', 'Black-50'), ('text-success', 'Success'), ('text-danger', 'Danger'), ('text-warning', 'Warning'), ('text-info', 'Info')], required=False)), ('body_colour', wagtail.core.blocks.ChoiceBlock(choices=[('text-primary', 'Primary'), ('text-secondary', 'Secondary'), ('text-light', 'Light'), ('text-dark', 'Dark'), ('text-white', 'White'), ('text-body', 'Body'), ('text-muted', 'Muted'), ('text-white-50', 'White-50'), ('text-black-50', 'Black-50'), ('text-success', 'Success'), ('text-danger', 'Danger'), ('text-warning', 'Warning'), ('text-info', 'Info')], required=False)), ('link_text_colour', wagtail.core.blocks.ChoiceBlock(choices=[('text-primary', 'Primary'), ('text-secondary', 'Secondary'), ('text-light', 'Light'), ('text-dark', 'Dark'), ('text-white', 'White'), ('text-body', 'Body'), ('text-muted', 'Muted'), ('text-white-50', 'White-50'), ('text-black-50', 'Black-50'), ('text-success', 'Success'), ('text-danger', 'Danger'), ('text-warning', 'Warning'), ('text-info', 'Info')], required=False)), ('link_bg_colour', wagtail.core.blocks.ChoiceBlock(choices=[('bg-primary', 'Primary'), ('bg-secondary', 'Secondary'), ('bg-transparent', 'Transparent'), ('bg-light', 'Light'), ('bg-dark', 'Dark'), ('bg-white', 'White'), ('bg-success', 'Success'), ('bg-danger', 'Danger'), ('bg-warning', 'Warning'), ('bg-info', 'Info')], required=False)), ('link_border_colour', wagtail.core.blocks.ChoiceBlock(choices=[('', 'No Border'), ('border border-primary', 'Primary'), ('border border-secondary', 'Secondary'), ('border border-light', 'Light'), ('border border-dark', 'Dark'), ('border border-white', 'White'), ('border border-success', 'Success'), ('border border-danger', 'Danger'), ('border border-warning', 'Warning'), ('border border-info', 'Info')], required=False))]))], blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Carousel Slideshow',
            },
        ),
        migrations.CreateModel(
            name='IconCardDeckSnippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Icon Card Deck title - optionally displayed with card deck; used as name in Snippet list', max_length=512)),
                ('text_align', models.CharField(choices=[('text-justify', 'Justify'), ('text-left', 'Left'), ('text-center', 'Centre'), ('text-right', 'Right')], default='text-center', max_length=128)),
                ('text_colour', models.CharField(choices=[('text-primary', 'Primary'), ('text-secondary', 'Secondary'), ('text-light', 'Light'), ('text-dark', 'Dark'), ('text-white', 'White'), ('text-body', 'Body'), ('text-muted', 'Muted'), ('text-white-50', 'White-50'), ('text-black-50', 'Black-50'), ('text-success', 'Success'), ('text-danger', 'Danger'), ('text-warning', 'Warning'), ('text-info', 'Info')], default='text-light', max_length=128)),
                ('bg_colour', models.CharField(choices=[('bg-primary', 'Primary'), ('bg-secondary', 'Secondary'), ('bg-transparent', 'Transparent'), ('bg-light', 'Light'), ('bg-dark', 'Dark'), ('bg-white', 'White'), ('bg-success', 'Success'), ('bg-danger', 'Danger'), ('bg-warning', 'Warning'), ('bg-info', 'Info')], default='bg-transparent', max_length=128)),
                ('border_colour', models.CharField(blank=True, choices=[('', 'No Border'), ('border border-primary', 'Primary'), ('border border-secondary', 'Secondary'), ('border border-light', 'Light'), ('border border-dark', 'Dark'), ('border border-white', 'White'), ('border border-success', 'Success'), ('border border-danger', 'Danger'), ('border border-warning', 'Warning'), ('border border-info', 'Info')], default='', max_length=128)),
                ('icon_size', models.FloatField(default='9.0', max_length=128, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('icon_size_unit', models.CharField(choices=[('rem', 'REM'), ('em', 'EM'), ('px', 'PX')], default='rem', max_length=128)),
                ('button_colour', models.CharField(choices=[('btn btn-primary', 'Primary'), ('btn btn-secondary', 'Secondary'), ('btn btn-light', 'Light'), ('btn btn-dark', 'Dark'), ('btn btn-link', 'Link'), ('btn btn-success', 'Success'), ('btn btn-danger', 'Danger'), ('btn btn-warning', 'Warning'), ('btn btn-info', 'Info'), ('btn btn-outline-primary', 'Outline Primary'), ('btn btn-outline-secondary', 'Outline Secondary'), ('btn btn-outline-light', 'Outline Light'), ('btn btn-outline-dark', 'Outline Dark'), ('btn btn-outline-success', 'Outline Success'), ('btn btn-outline-danger', 'Outline Danger'), ('btn btn-outline-warning', 'Outline Warning'), ('btn btn-outline-info', 'Outline Info')], default='btn btn-primary', max_length=128)),
                ('button_size', models.CharField(blank=True, choices=[('', 'Normal'), ('btn-sm', 'Small'), ('btn-lg', 'Large')], default='', max_length=128)),
                ('display_title', models.BooleanField(default=False)),
                ('cards', wagtail.core.fields.StreamField([('icon_card_block', wagtail.core.blocks.StructBlock([('icon', wagtail.core.blocks.CharBlock(default='fa fa-star', help_text='Card Icon - Specify font awesome library and icon name', label='Icon', required=True)), ('title', wagtail.core.blocks.CharBlock(help_text='Card Title - Presented as a h5 heading', label='Card Title', required=True)), ('text', wagtail.core.blocks.CharBlock(label='Card Main Text', required=False)), ('button_text', wagtail.core.blocks.CharBlock(default='Read More', label='Button Text', required=False)), ('button_page_link', wagtail.core.blocks.PageChooserBlock(help_text='Use button to link to selected internal page OR use external link field below', label='Button Link (Internal Page)', required=False)), ('button_external_link', wagtail.core.blocks.URLBlock(help_text='Use button to link to external link OR use page link above (but not both)', label='Button Link (External)', required=False)), ('custom_layout', wagtail.core.blocks.CharBlock(default='col-12 col-sm-12 col-md-4 col-lg-4 col-xl-4', help_text='Custom Bootstrap 4 Column layout per card e.g., "col-12 col-sm-4 col-lg-3"', label='Custom Column Layout', required=True))]))])),
            ],
            options={
                'verbose_name': 'Icon Card Deck',
            },
        ),
        migrations.CreateModel(
            name='SearchIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='SitePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='TagIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bootstrap_theme', models.CharField(choices=[('default', 'Default Bootstrap 4'), ('cerulean', 'Bootswatch: cerulean'), ('cosmo', 'Bootswatch: cosmo'), ('cyborg', 'Bootswatch: cyborg'), ('darkly', 'Bootswatch: darkly'), ('flatly', 'Bootswatch: flatly'), ('journal', 'Bootswatch: journal'), ('litera', 'Bootswatch: litera'), ('lumen', 'Bootswatch: lumen'), ('lux', 'Bootswatch: lux'), ('materia', 'Bootswatch: materia'), ('minty', 'Bootswatch: minty'), ('pulse', 'Bootswatch: pulse'), ('sandstone', 'Bootswatch: sandstone'), ('simplex', 'Bootswatch: simplex'), ('sketchy', 'Bootswatch: sketchy'), ('slate', 'Bootswatch: slate'), ('solar', 'Bootswatch: solar'), ('spacelab', 'Bootswatch: spacelab'), ('superhero', 'Bootswatch: superhero'), ('united', 'Bootswatch: united'), ('yeti', 'Bootswatch: yeti')], default='pulse', help_text='Select a Bootstrap 4 Theme for the site', max_length=32)),
                ('code_theme', models.CharField(choices=[('default', 'default'), ('emacs', 'emacs'), ('friendly', 'friendly'), ('colorful', 'colorful'), ('autumn', 'autumn'), ('murphy', 'murphy'), ('manni', 'manni'), ('monokai', 'monokai'), ('perldoc', 'perldoc'), ('pastie', 'pastie'), ('borland', 'borland'), ('trac', 'trac'), ('native', 'native'), ('fruity', 'fruity'), ('bw', 'bw'), ('vim', 'vim'), ('vs', 'vs'), ('tango', 'tango'), ('rrt', 'rrt'), ('xcode', 'xcode'), ('igor', 'igor'), ('paraiso-light', 'paraiso-light'), ('paraiso-dark', 'paraiso-dark'), ('lovelace', 'lovelace'), ('algol', 'algol'), ('algol_nu', 'algol_nu'), ('arduino', 'arduino'), ('rainbow_dash', 'rainbow_dash'), ('abap', 'abap'), ('solarized-dark', 'solarized-dark'), ('solarized-light', 'solarized-light'), ('sas', 'sas'), ('stata', 'stata'), ('stata-light', 'stata-light'), ('stata-dark', 'stata-dark'), ('inkpot', 'inkpot')], default='monokai', help_text='Select a Pygments Theme for code blocks', max_length=32)),
                ('brand_icon', models.CharField(blank=True, default='fa fa-home', help_text='Provide the name of a Font Awesome icon (as an alternative to a logo image) to be used as the logo in the main navigation bar.', max_length=64)),
                ('brand_name', models.CharField(blank=True, help_text='Provide some text for the brand name next to the logo in the main navigation bar.', max_length=64)),
                ('navbar_expand', models.CharField(choices=[('sm', 'Small'), ('md', 'Medium'), ('lg', 'Large'), ('xl', 'Extra Large')], default='lg', help_text='Select the media size at which the navbar menu collapses', max_length=2)),
                ('navbar_text_colour_mode', models.CharField(choices=[('navbar-light', 'Light'), ('navbar-dark', 'Dark')], default='navbar-dark', help_text='Select the text foreground colour mode of the navigation bar', max_length=16)),
                ('navbar_background_colour', models.CharField(choices=[('bg-primary', 'Primary'), ('bg-secondary', 'Secondary'), ('bg-transparent', 'Transparent'), ('bg-light', 'Light'), ('bg-dark', 'Dark'), ('bg-white', 'White'), ('bg-success', 'Success'), ('bg-danger', 'Danger'), ('bg-warning', 'Warning'), ('bg-info', 'Info')], default='bg-primary', help_text='Select the background colour of the navigation bar', max_length=32)),
                ('navbar_outer_class', models.CharField(blank=True, choices=[('None', 'None'), ('container', 'container'), ('container-fluid', 'container-fluid')], default='container', help_text='Select the class of the div that encloses the navbar (container for now; none for full width)', max_length=32)),
                ('twitter', models.URLField(blank=True, help_text='Twitter Account')),
                ('brand_logo', models.ForeignKey(blank=True, help_text='Provide an image for the navigation bar logo (preferably small).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'verbose_name': 'Custom Site Settings',
            },
        ),
        migrations.CreateModel(
            name='SitePageTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_site_pages', to='sitecore.SitePage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sitecore_sitepagetags_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='sitepage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='sitecore.SitePageTags', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
