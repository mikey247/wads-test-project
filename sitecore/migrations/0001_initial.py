# Generated by Django 2.0.8 on 2019-02-06 13:56

from django.db import migrations, models
import django.db.models.deletion
import django.forms.widgets
import modelcluster.contrib.taggit
import modelcluster.fields
import sitecore.blocks
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.documents.blocks
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0040_page_draft_title'),
        ('taggit', '0002_auto_20150616_2121'),
    ]

    operations = [
        migrations.CreateModel(
            name='CarouselSnippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Carousel title - optionally displayed with carousel; used as name in Snippet list', max_length=512)),
                ('animate', models.BooleanField(default=True, help_text='Carousel has sliding animation effect when enabled')),
                ('interval', models.IntegerField(default=5000, help_text='Delay (in milliseconds) between each slide transition')),
                ('pause', models.BooleanField(default=True, help_text='Carousel pauses with mouse hover when enabled')),
                ('wrap', models.BooleanField(default=True, help_text='Carousel goes through all slides continuously when enabled; stops at last slide otherwise')),
                ('slides', wagtail.core.fields.StreamField([('slide_block', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(required=False)), ('image', wagtail.images.blocks.ImageChooserBlock()), ('text', wagtail.core.blocks.StreamBlock([('heading', wagtail.core.blocks.StructBlock([('level', wagtail.core.blocks.ChoiceBlock(choices=[('h2', 'h2'), ('h3', 'h3'), ('h4', 'h4'), ('h5', 'h5'), ('h6', 'h6')], widget=django.forms.widgets.RadioSelect)), ('title', wagtail.core.blocks.CharBlock(required=True)), ('sub_title', wagtail.core.blocks.CharBlock(help_text='Optional sub-heading in small text', required=False))])), ('paragraph', sitecore.blocks.ShortcodeRichTextBlock(label='Rich Text Paragraph')), ('blockquote', wagtail.core.blocks.StructBlock([('quote', sitecore.blocks.ShortcodeRichTextBlock(required=True)), ('footer', wagtail.core.blocks.CharBlock(required=False)), ('cite', wagtail.core.blocks.CharBlock(required=False)), ('reverse', wagtail.core.blocks.BooleanBlock(help_text='Check to right-align the quote', required=False))])), ('image', wagtail.images.blocks.ImageChooserBlock()), ('docs', wagtail.documents.blocks.DocumentChooserBlock(template='bootstrapblocks/document.html')), ('page', wagtail.core.blocks.PageChooserBlock()), ('external', wagtail.core.blocks.URLBlock())], required=False))]))], blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Carousel Slideshow',
            },
        ),
        migrations.CreateModel(
            name='SitePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='SitePageTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_site_pages', to='sitecore.SitePage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sitecore_sitepagetags_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bootstrap_theme', models.CharField(choices=[('default', 'Default Bootstrap 3'), ('paper', 'Bootswatch: Paper')], default='paper', help_text='Select Bootstrap 3 Theme', max_length=10)),
                ('twitter', models.URLField(blank=True, help_text='Twitter Account')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'verbose_name': 'Custom Site Settings',
            },
        ),
        migrations.CreateModel(
            name='TagIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AddField(
            model_name='sitepage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='sitecore.SitePageTags', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
